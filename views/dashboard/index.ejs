<div class="container-fluid">
  <!-- Breadcrumb -->
  <div class="row mt-2 ms-1 me-1">
    <ul class="breadcrumb rounded">
      <li><a href="#">Dashboard</a></li>
    </ul>
  </div>
  <!-- Main content -->
  <div class="row mt-2 mb-2">
    <!-- Dành cho Admin/ IT -->
    <% if (user && (user.role === 'admin' || user.role === 'it_staff')) { %>
    <div class="col-md-12 d-flex justify-content-between">
      <div class="col-md-3">
        <div class="card m-2 shadow">
          <div class="card-header">
            <h5 class="text-center">Tổng số lượng thiết bị</h5>
          </div>
          <div class="card-body bg-primary-subtle">
            <h1 id="totalEq" class="text-center">0</h1>
          </div>
          <div class="card-footer">
            <p class="text-center">Unit: PCS</p>
          </div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="card m-2 shadow">
          <div class="card-header">
            <h5 class="text-center">Đang sử dụng</h5>
          </div>
          <div class="card-body bg-info-subtle">
            <h1 id="eqInUse" class="text-center">0</h1>
          </div>
          <div class="card-footer">
            <p class="text-center">Unit: PCS</p>
          </div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="card m-2 shadow">
          <div class="card-header"><h5 class="text-center">Báo lỗi</h5></div>
          <div class="card-body bg-danger-subtle">
            <h1 id="repairReq" class="text-center">0</h1>
          </div>
          <div class="card-footer">
            <p class="text-center">Unit: Ticket(s)</p>
          </div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="card m-2 shadow">
          <div class="card-header">
            <h5 class="text-center">Hỗ trợ cài đặt</h5>
          </div>
          <div class="card-body bg-warning-subtle">
            <h1 id="setupReq" class="text-center">0</h1>
          </div>
          <div class="card-footer">
            <p class="text-center">Unit: Ticket(s)</p>
          </div>
        </div>
      </div>
    </div>
   
  </div>
  <div class="row mt-2 mb-2 d-flex justify-content-between">
    <div class="col-md-8">
      <div id="msg"></div>
      <div class="card ms-2 me-1">
        <div class="card-header bg-secondary-subtle">Newest tickets</div>
        <div class="card-body">
          <table id="newestTicketTable" class="table table-striped">
            <thead>
              <tr>
                <th>#</th>
                <th>Computer name</th>
                <th>Owner</th>
                <th>Type</th>
                <th>Description</th>
                <th>Created at</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody id="newestTicketTableBody"></tbody>
            <tfoot>
              <tr>
                <th>#</th>
                <th>Computer name</th>
                <th>Owner</th>
                <th>Type</th>
                <th>Description</th>
                <th>Created at</th>
                <th>Action</th>
              </tr>
            </tfoot>
          </table>
        </div>
      </div>
    </div>
    <div class="col-md-4">
      <div class="card me-2">
        <div class="card-header bg-info-subtle">My task</div>
        <div class="card-body">
          <table id="myTaskTable" class="table table-striped">
            <thead>
              <tr>
                <th>#</th>
                <th>Computer name</th>
                <th>Type</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody id="myTaskTableBody"></tbody>
            <tfoot>
              <tr>
                <th>#</th>
                <th>Computer name</th>
                <th>Type</th>
                <th>Action</th>
              </tr>
            </tfoot>
          </table>
        </div>
      </div>
    </div>
 
  </div>
   <% } %>
  <div class="row mt-2 mb-2">
    <!-- Dành cho user -->
    <div class="col-md-12 m-2">
      <div class="card">
        <div class="card-header bg-info">Personal Ticket history</div>
        <div class="card-body">
          <table id="ticketHistoryTable" class="table table-striped">
            <thead>
              <tr>
                <th>#</th>
                <th>Computer name</th>
                <th>Description</th>
                <th>Created at</th>
                <th>Reported by</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody id="ticketHistoryTableBody"></tbody>
            <tfoot>
              <tr>
                <th>#</th>
                <th>Computer name</th>
                <th>Description</th>
                <th>Created at</th>
                <th>Reported by</th>
                <th>Status</th>
              </tr>
            </tfoot>
          </table>
        </div>
      </div>
    </div>
  </div>

  </div>

  <!-- JS DataTable -->
  <script src="https://code.jquery.com/jquery-3.7.1.js"></script>
  <script src="https://cdn.datatables.net/2.3.3/js/dataTables.js"></script>
  <script src="https://cdn.datatables.net/2.3.3/js/dataTables.bootstrap5.js"></script>
</div>

<script>
  // Định dạng thời gian
  function formatDate(isoString) {
    var date = new Date(isoString);
    var day = ("0" + date.getDate()).slice(-2);
    var month = ("0" + (date.getMonth() + 1)).slice(-2);
    var year = date.getFullYear();
    var hours = ("0" + date.getHours()).slice(-2);
    var minutes = ("0" + date.getMinutes()).slice(-2);

    return day + "/" + month + "/" + year + " " + hours + ":" + minutes;
  }

    // Hiển thị message chung
  function showMessage(type, text) {
    const msgDiv = document.getElementById("msg");

    // gán nội dung
    msgDiv.innerHTML = `<div class="alert alert-${type}">${text}</div>`;

    // hiện ra với hiệu ứng fade-in
    msgDiv.classList.add("show");

    // sau 3s thì fade-out
    setTimeout(() => {
      msgDiv.classList.remove("show");

      // đợi hết transition rồi mới xóa nội dung
      setTimeout(() => {
        msgDiv.innerHTML = "";
      }, 500); // khớp với transition 0.5s
    }, 3000);
  }

  // Lấy danh sách ticket của người đăng nhập (cho tất cả các user)
  async function loadTicketHistory() {
    try {
      const res = await fetch("/dashboard/getTicketInfoOfCurrentLoginUser");
      const data = await res.json();
      if (data.success) {
        var tbody = document.getElementById("ticketHistoryTableBody");
        tbody.innerHTML = "";

        data.data.forEach((ticket, index) => {
          var row = `
            <tr>
              <td>${index + 1}</td>
              <td>${ticket.computer_name}</td>
              <td>${ticket.descriptions}</td>
              <td>${formatDate(ticket.created_at)}</td>
              <td>${ticket.reported_by}</td>
              <td>${ticket.status}</td>
            </tr>`;
          tbody.innerHTML += row;
        });

        new DataTable("#ticketHistoryTable");
      }
    } catch (err) {
      console.error("Lỗi fetch dữ liệu:", err);
    }
  }

  // Lấy danh sách các ticket mới nhất (dành cho Admin, IT)
  async function loadNewestTicket() {
try {
  const res = await fetch("/tickets/getNewestTicket");
  const data = await res.json();
  var tbody = document.getElementById("newestTicketTableBody");
  tbody.innerHTML = "";
  data.data.forEach((newTicket, index) => {
    const statusMap = {
      0: `<button class="btn btn-sm btn-outline-info" onclick="assignTicket(${newTicket.ticket_id})">Claim</button>`,
      1: `<span class="text-warning">Assigned</span>`,
      2: `<span class="text-success">Fixed</span>`,
      };
          var row = `
            <tr>
              <td>${index + 1}</td>
              <td>${newTicket.computer_name}</td>
              <td>${newTicket.owner_name}</td>
              <td>${newTicket.type === 1? `Sửa chữa`: "Cài đặt"}</td>
              <td>${newTicket.descriptions}</td>
              <td>${formatDate(newTicket.created_at)}</td>
              <td>${statusMap[newTicket.status] || "Unknown"}</td>
            </tr>`;
          tbody.innerHTML += row;
  });
  new DataTable("#newestTicketTable");
} catch(err) {
   console.error("Lỗi fetch dữ liệu:", err);
}
  }

  // Hiển thị My Task
  async function myTask() {
    try {
      const res = await fetch("/repairs/getAssignedTicketOfCurrentLoggedInITStaff");
      const data = await res.json();
      if (data.success) {
        var tbody = document.getElementById("myTaskTableBody");
        tbody.innerHTML = "";

        data.data.forEach((task, index) => {
          var row = `
            <tr>
              <td>${index + 1}</td>
              <td>${task.computer_name}</td>
              <td>${task.type === 1? `Sửa chữa`: "Cài đặt"}</td>
              <td>
                <button class ="btn btn-outline-success btn-sm" onclick = onclick="updateTask(${task.id})><i class="bi bi-eye"></i></button>
                <button class ="btn btn-outline-danger btn-sm"><i class="bi bi-x-circle"></i></button>
              </td>
            </tr>`;
          tbody.innerHTML += row;
        });

        new DataTable("#myTaskTable");
      }
    } catch (err) {
      console.error("Lỗi fetch dữ liệu:", err);
    }
    } 

  

  // Hiển thi các thông tin lên Dashboard
  async function loadDashboardInfo() {
    try {
      const resTotalEq = await fetch("/dashboard/totalEq");
      const resEqInUse = await fetch("/dashboard/eqInUse");
      const resRepairTicket = await fetch("/dashboard/repairReq");
      const resSetupTicket = await fetch("/dashboard/setupReq");

      const dataTotalEq = await resTotalEq.json();
      const dataEqInUse = await resEqInUse.json();
      const dataRepair = await resRepairTicket.json();
      const dataSetup = await resSetupTicket.json();

      await loadTicketHistory();
      await loadNewestTicket();
      await myTask();

      if (
        dataTotalEq.success &&
        dataEqInUse.success &&
        dataRepair.success &&
        dataSetup.success
      ) {
        var totalEq = document.getElementById("totalEq");
        if (totalEq) totalEq.textContent = dataTotalEq.data;

        var eqInUse = document.getElementById("eqInUse");
        if (eqInUse) eqInUse.textContent = dataEqInUse.data;

        var repairReq = document.getElementById("repairReq");
        if (repairReq) repairReq.textContent = dataRepair.data;

        var setupReq = document.getElementById("setupReq");
        if (setupReq) setupReq.textContent = dataSetup.data;
      }
    } catch (err) {
      console.error("Fetch lỗi:", err);
      var totalEq = document.getElementById("totalEq");
      if (totalEq) totalEq.textContent = "Error";
    }
  }
  async function assignTicket(id) {
  try {
    const res = await fetch(`/repairs/assignedByITStaff/${id}`, {
      method: "POST",
    });
    const data = await res.json();
    if (data.success) {
      showMessage("success", data.message);
      loadDashboardInfo();
      loadNewestTicket(); // reload lại bảng Ticket
      myTask(); //reload lại bảng My Task
    } else {
      showMessage("danger", data.message);
    }
  } catch (err) {
    console.error("Lỗi khi assign ticket:", err)
  }
  }

  async function updateTask(id) {
    try {

    } catch {

    }
  }

  loadDashboardInfo();
</script>
